#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var request = require("request");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

  function getmessages(sender, receiver, cb){
   var receiverid = receiver;
   var senderid = sender;
   console.log(senderid);
   request('http://postgresapi:3000/getmessage/'+ receiverid +'/'+ senderid, function (error, response, body) {
   if (!error && response.statusCode == 200) {
       console.log("from the socketss "+ body);
       cb(body);
     }
   })
   }

 function addmessage(sender_id, message, cb){
   var sender_id =sender_id;
   console.log(sender_id);
   var message = message;
   var addmessage = { method: 'POST',
      url: 'http://postgresapi:3000/addmessage',
      headers:
       { 'cache-control': 'no-cache',
         'content-type': 'application/json' },
      body: { receiver_id: 2, message: message, sender_id:sender_id },
      json: true };
   request(addmessage)
   id=(addmessage.body.sender_id)
   message = (addmessage.body.message)
   cb(id, message)
 }


 var server = http.createServer(app);
 var io = require('socket.io')(server);
 io.on('connection', function(socket){
   socket.on('user capture', function(user, senderid, receiverid){
     console.log(user + " connected");
     var sender = senderid;
     var receiver = receiverid;
   getmessages(sender, receiver, function(body) {
     socket.emit('connection', body);
   });
   });
   socket.on('disconnect', function(){
     console.log('a user disconnected');
   });

   socket.on('chat message', function(user, msg){
     console.log(user + msg);
     var user = user;
     var message = msg;
     addmessage(user, message, function(id, message){
     io.sockets.emit("success", id, message);
     })

   });
 });
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
