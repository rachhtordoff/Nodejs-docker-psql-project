#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var request = require("request");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

  function getmessages(sender, receiver, cb){
   var receiverid = receiver;
   var senderid = sender;
   console.log(senderid);
   console.log(receiverid);
   request('http://postgresapi:3000/getmessage/'+ receiverid +'/'+ senderid, function (error, response, body) {
   if (!error && response.statusCode == 200) {
       console.log("get messages from the socketss "+ body);
       cb(body);
     }
   })
   }

 function addmessage(sender_id, receiver_id,  message, cb){
   var sender_id =sender_id;
   var receiver_id = receiver_id;
   var message = message;
   var addmessage = { method: 'POST',
      url: 'http://postgresapi:3000/addmessage',
      headers:
       { 'cache-control': 'no-cache',
         'content-type': 'application/json' },
      body: { receiver_id: receiver_id, message: message, sender_id:sender_id },
      json: true };
   request(addmessage)
   id=(addmessage.body.sender_id)
   message = (addmessage.body.message)
   cb(id, message)
 }

 function getdetails(id, cb){
  var id = id;
  request('http://postgresapi:3000/getmessagecount/' + id, function (error, response, body) {
  if (!error && response.statusCode == 200) {
      cb(body);
    }
  })
  }

  function getevents(id, cb){
   var id = id;
   request('http://postgresapi:3000/getevents/' + id , function (error, response, body) {
   if (!error && response.statusCode == 200) {
       cb(body);
     }
   })
   }

   function addschedulevent(sender_id, receiver_id, note, title, date, cb){
     console.log("helloooo")
     var sender_id =sender_id;
     var receiver_id = receiver_id;
     var note = note;
     var title = title;
     var data = date;
     var addschedulevent = { method: 'POST',
        url: 'http://postgresapi:3000/addschedulevent',
        headers:
         { 'cache-control': 'no-cache',
           'content-type': 'application/json' },
        body: { relation: receiver_id, title: title, note:note, date: date, user_id:sender_id },
        json: true };
     request(addschedulevent)
     receiver_id =(addschedulevent.body.relation)
     user_id = (addschedulevent.body.user_id)
     note = (addschedulevent.body.note)
     title = (addschedulevent.body.title)
     date =  (addschedulevent.body.date)
     cb(receiver_id, user_id, note, title, date)
   }

 var server = http.createServer(app);
 var io = require('socket.io')(server);
 var socketlist = {};
 io.on('connection', function( socket){
   socket.on('user capture', function(user, id, receiverid){
     console.log(user + " connected");
     socket.user_id = id;
     socketlist[socket.id]= socket;
     var sender = id;
     var receiver = receiverid;
   getmessages(sender, receiver, function(body) {
     socket.emit('connection', body);
   });
   getdetails(sender, function(body) {
     console.log(body);
     socket.emit('userdetails', body);
   });
   });
   socket.on('disconnect', function(){
     console.log('a user disconnected');
     delete socketlist[socket.id];
     console.log(socketlist);
   });

   socket.on('chat message', function(sender, receiver, msg){
     console.log("sender: " + sender + " receiver: " +receiver + msg);
     var sender = sender;
     var receiver = receiver;
     var message = msg;
     addmessage(sender, receiver, message, function(id, message){
     io.sockets.emit("success", id, message);
   })
   getdetails(sender, function(body) {
     for (usersid in socketlist){
       usersid = socketlist[usersid]
       console.log("hello1" + body)
       console.log(usersid.user_id)
       if (usersid.user_id ===  sender){
         console.log("hello2" + body)
         usersid.emit('details', body);
       }
   }
   });
   });
   socket.on('addevent', function(sender, receiver, title, note, date){
     var sender = sender;
     var receiver = receiver;
     var note = note;
     var title = title;
     var date = '1971-07-13';
     console.log("sender: " + sender + " receiver: " +receiver + title + note);
     addschedulevent(sender, receiver, note, title, date, function(receiver_id, user_id, note, title, date){
       console.log(note + title);
       for (usersid in socketlist){
         usersid = socketlist[usersid]
     usersid.emit("eventsuccess", receiver_id, user_id, note, title, date);
   }
   })
 });

console.log(socketlist);
 });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
